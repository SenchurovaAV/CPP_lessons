0.
Ключевое слово static влияет на время жизни переменных и лбласть видимости.
Если переменная внутри функции объявлена с ключевым словом static, она будет создана только один раз ( то есть, при выходе из области видимости не уничтожается), а память для ее хранения выделяется в статической области. Например:
void fun()
{
    static int val = 0;
    ++val;
    std::cout << val << std::endl;
}

int main() 
{
    fun();          // val == 1;
    fun();          // val == 2;
}

Без static:
void fun() 
{
    int val =0;
    ++val;
    std::cout << val << std::endl;
}

int main () 
{
    fun();          //val == 0;
    fun();          //val == 0;
}
Если переменная объявлена с static вне функций, (как глобальная переменная), она становится не видна в других файлах.

1. 
Наследование в С++ означает, что свойства (в т.ч. и методы) предка (базового класса) передаются наследнику
 (производному классу). Использование базовых классов при создании производных позволяет экономить время на написании нового кода, при этом исключая появление новых ошибок.

2.
Public наследование
Если создать производный класс с указанием базового класса со словом public, объект производного класса будет являться открытым объектом базового класса.Открытое наследование основываентся на отношении "являетрся", то есть производный класс должен обладать всеми свойствами базового класса. Private базового класса будет невидимым для производного класса, кроме как с использованием методов базового (или дружественных).

3.
В public-наследовании существует возможность восходящего приведения, при котором указатель (ссылка) на производный объект может преобразовываться в указатель (ссылку) на объект базового класса.
Функции, определенный со ссылкой (указателем) на производный класс, могут работать и с объектами базового, и с объектами производного классов.
Использование восходящего приведения транзистивно.

4.
Виртуальные методы используются с ключевым словом virtual. При работе со ссылкой/указателем на объект, а не непосредственно им, виртуальный метод позволяет определить метод, основываясь на типе объекта, а не ссылки или указателя. 
Если в производном классе какой-либо метод не совпадает (переопределяется) с тем же методом базового класса, он определяется в качестве виртуального.
Виртуальные деструкторы и конструкторы:
Виртуальные конструкторы не имеют смысла. Желательно создавать виртуальный деструктор в базовом классе, тк тогда для каждого наследника будет вызываться деструктор его класса.


