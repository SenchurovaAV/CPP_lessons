0.
Lvalue  - объект, который имеет адрес. Это объект, на который можно ссылаться по адресу. Например, int &val = lval; - создание ссылки на lval.
Rvalue определяется исключением; это все объекты не lvalue. Это объект, который может находиться только справа от = в строке a = b, ему нельзя присвоить значение. Ссылка на объект: int &&val = rvalue;

1.
Списки инициализации нужны для того, чтобы не присваивать значения переменным — членам класса, а инициализировать их. Список инициализации начинается после параметров конструктора двоеточием, а заканчивается { - открытием тела конструктора. В некоторых случаях невозможно присвоить значение приватному члену класса в теле конструктора, тогда его можно инициализировать, используя список инициализации. 
Class Class_0
{
private:
	const bool Verity;
public:
	Class_0 () : Verity(1);
{…}
}

2.
Типы конструкторов. 
Конструктор по умолчанию
Конструктор без параметров.
Конструктор копирования
Конструктор, аргументом которого является ссылка на объект. Используется для инициализации одного объекта другим объектом. (копирование выполняется почленно по значению)
Конструктор перемещения
Конструктор, появившийся в стандарте С++11 с появлением возможности  ссылаться на rvalue с помощью &&. Используется, чтобы не использовать временные переменные при копировании.

3.
Допустим, мы имеем строку 
size_t size() const;
В этом случае const позволяет компилятору определить, что значение size не изменяется в данной области видимости. (При попытке изменить константное значение компилятор выдаст ошибку). Это позволяет избежать неосознанной замены значений переменных, которые должны быть постоянными. Если const встречается после func(), это означает, что функция не изменяет состояние объекта. Также ссылка на переменную const является rvalue, что также можно использовать.

4.
В С++ можно перегружать операторы — это является следствием полиморфизма языка. Например, переопределим оператор +. Для этого воспользуемся формой operator+(arguments).
Существуют ограничения переопределения операторов. 
1. Переопределять можно только определенные ранее операторы (нельзя с помощью данной формы создать новый);
2. У нового оператора должен быть такой же синтаксис, как у прежнего (например, нельзя определить унарный оператор +);
3. Существуют операторы, которые нельзя переопределять;

5.
Ключевое слово friend используется, если нужно использовать в функции члены-объекты класса внутри private, но сама функция не находится в классе. Стоит отметить, что поэтому не нужно определять namespace с помощью "::".

6.
a. new в случае провала вызывает исключение, malloc возвращает NULL;
b. new вызывает конструктор класса, malloc выделяет память;
c. new возвращает тип переменной, malloc — void;
d. при вызове new необходимый размер памяти определяется автоматически компилятором, malloc — выделяет определенное количество памяти
e. new можно переопределить (а еще это оператор), malloc переопределить нельзя (а еще это функция)
